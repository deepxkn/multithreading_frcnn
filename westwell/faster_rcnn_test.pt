name: "ZF-512"

input: "data"
input_shape {
  dim: 1
  dim: 3
  dim: 224
  dim: 224
}

input: "im_info"
input_shape {
  dim: 1
  dim: 3
}

#========= conv1-conv5 ============
layer {
	name: "conv1"
	type: "Convolution"
	bottom: "data"
	top: "conv1"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
	convolution_param {
		num_output: 96
		kernel_size: 7
		pad: 3
		stride: 2
	}
}
layer {
	name: "norm1_new"
	type: "BatchNorm"
	bottom: "conv1"
	top: "norm1"
    batch_norm_param {
       use_global_stats: true  
    }
}
layer {
	name: "scale1"
	type: "Scale"
	bottom: "norm1"
	top: "norm1"
    scale_param {
        bias_term: true 
    }
    param {
        lr_mult : 0.0  
        decay_mult: 0.0 
    }
    param {
        lr_mult : 0.0  
        decay_mult: 0.0 
    }
}
layer {
	name: "relu1"
	type: "ReLU"
	bottom: "norm1"
	top: "relu1"
}
layer {
	name: "pool1"
	type: "Pooling"
	bottom: "relu1"
	top: "pool1"
	pooling_param {
		kernel_size: 3
		stride: 2
		pad: 1
		pool: MAX
	}
}
layer {
	name: "conv2"
	type: "Convolution"
	bottom: "pool1"
	top: "conv2"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
	convolution_param {
		num_output: 256
		kernel_size: 5
		pad: 2
		stride: 2
	}
}
layer {
	name: "norm2_new"
	type: "BatchNorm"
	bottom: "conv2"
	top: "norm2"
    batch_norm_param {
       use_global_stats: true  
    }
}
layer {
	name: "scale2"
	type: "Scale"
	bottom: "norm2"
	top: "norm2"
    scale_param {
        bias_term: true 
    }
    param {
        lr_mult : 0.0  
        decay_mult: 0.0 
    }
    param {
        lr_mult : 0.0  
        decay_mult: 0.0 
    }
}
layer {
	name: "relu2"
	type: "ReLU"
	bottom: "norm2"
	top: "relu2"
}
layer {
	name: "pool2"
	type: "Pooling"
	bottom: "relu2"
	top: "pool2"
	pooling_param {
		kernel_size: 3
		stride: 2
		pad: 1
		pool: MAX
	}
}
layer {
	name: "conv3"
	type: "Convolution"
	bottom: "pool2"
	top: "conv3"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
	convolution_param {
		num_output: 384
		kernel_size: 3
		pad: 1
		stride: 1
	}
}
layer {
	name: "norm3_new"
	type: "BatchNorm"
	bottom: "conv3"
	top: "norm3"
    batch_norm_param {
       use_global_stats: true  
    }
}
layer {
	name: "scale3"
	type: "Scale"
	bottom: "norm3"
	top: "norm3"
    scale_param {
        bias_term: true 
    }
    param {
        lr_mult : 0.0  
        decay_mult: 0.0 
    }
    param {
        lr_mult : 0.0  
        decay_mult: 0.0 
    }
}
layer {
	name: "relu3"
	type: "ReLU"
	bottom: "norm3"
	top: "relu3"
}
layer {
	name: "conv4"
	type: "Convolution"
	bottom: "relu3"
	top: "conv4"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
	convolution_param {
		num_output: 384
		kernel_size: 3
		pad: 1
		stride: 1
	}
}
layer {
	name: "norm4_new"
	type: "BatchNorm"
	bottom: "conv4"
	top: "norm4"
    batch_norm_param {
       use_global_stats: true  
    }
}
layer {
	name: "scale4"
	type: "Scale"
	bottom: "norm4"
	top: "norm4"
    scale_param {
        bias_term: true 
    }
    param {
        lr_mult : 0.0  
        decay_mult: 0.0 
    }
    param {
        lr_mult : 0.0  
        decay_mult: 0.0 
    }
}
layer {
	name: "relu4"
	type: "ReLU"
	bottom: "norm4"
	top: "relu4"
}
layer {
	name: "conv5"
	type: "Convolution"
	bottom: "relu4"
	top: "conv5"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
	convolution_param {
		num_output: 256
		kernel_size: 3
		pad: 1
		stride: 1
	}
}
layer {
	name: "relu5"
	type: "ReLU"
	bottom: "conv5"
	top: "conv5"
}


#========= RPN ============


layer {
  name: "rpn_conv1"
  type: "Convolution"
  bottom: "conv5"
  top: "rpn_conv1"
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
  }
}
layer {
  name: "rpn_relu1"
  type: "ReLU"
  bottom: "rpn_conv1"
  top: "rpn_conv1"
}
layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn_conv1"
  top: "rpn_cls_score"
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
  }
}
layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn_conv1"
  top: "rpn_bbox_pred"
  convolution_param {
    num_output: 36   # 4 * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
  }
}
layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

#========= RoI Proposal ============

layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}
layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'
  top: 'rpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 18 dim: -1 dim: 0 } }
}
layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rois'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "'feat_stride': 16"
  }
}

#========= RCNN ============

layer {
  name: "roi_pool_conv5"
  type: "ROIPooling"
  bottom: "conv5"
  bottom: "rois"
  top: "roi_pool_conv5"
  roi_pooling_param {
    pooled_w: 6
    pooled_h: 6
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "fc6_n"
  type: "InnerProduct"
  bottom: "roi_pool_conv5"
  top: "fc6"
  inner_product_param {
    num_output: 512
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
    scale_train: false
  }
}
layer {
  name: "fc7_n"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  inner_product_param {
    num_output: 512
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
    scale_train: false
  }
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score"
  inner_product_param {
    num_output: 11
  }
}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  inner_product_param {
    num_output: 44
  }
}
layer {
  name: "cls_prob"
  type: "Softmax"
  bottom: "cls_score"
  top: "cls_prob"
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
